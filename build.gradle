import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jetbrains.grammarkit.tasks.GenerateParser

buildscript {

    repositories {
        mavenCentral()
        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath "com.github.hurricup:gradle-grammar-kit-plugin:2017.1.1"
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.3.0"
    id "jacoco"
    id 'com.github.kt3k.coveralls' version '2.8.2'
}


repositories {
    mavenCentral()
}

group = 'de.holisticon.jenkinsfile'
version = "${pluginVersion}.${platformBranch}${pluginBuild}"

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

apply plugin: 'java'
sourceCompatibility = javaVersion
targetCompatibility = javaTargetVersion
tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

def genRoot = file('src-gen')

sourceSets {
    main {
        java.srcDirs 'src', genRoot
        resources.srcDir 'resources'
    }
    test {
        java.srcDir 'test'
        resources.srcDirs 'testData'
    }
}

apply plugin: 'org.jetbrains.intellij'
intellij {
    version "${platformVersion}.${platformBranch}.${platformBuild}"
    downloadSources Boolean.valueOf(downloadIdeaSource)
    intellij.plugins = ['IntelliLang', 'PsiViewer:3.28.93', 'coverage']
    if (project.hasProperty('idea_sandbox')) {
        sandboxDirectory project.rootDir.canonicalPath + "/" + project.idea_sandbox
    } else {
        sandboxDirectory project.rootDir.canonicalPath + "/.sandbox"
    }
    if (project.hasProperty('idea_path')) {
        alternativeIdePath = project.idea_path
    }
    updateSinceUntilBuild = true
}

patchPluginXml{
    pluginDescription(file(descriptionFile).text)
    changeNotes(file(changesFile).text)
}

runIde{
    if( project.hasProperty("nocancel")){
        systemProperty("idea.ProcessCanceledException", "disabled")
    }
    if( project.hasProperty("traverseUI")){
        args("traverseUI", "$project.rootDir.canonicalPath/resources/search/searchableOptions.xml")
    }
}

test {
    systemProperty("idea.plugins.path", project.rootDir.canonicalPath + "/.test-plugins")

    if (!System.getenv("WITH_COVERAGE") && !project.hasProperty("with_coverage")) {
        jacoco {
            enabled = false
        }
    }

    useJUnit {
        if (project.hasProperty("runtest")) {
            include '**/' + project.property('runtest') + '.class'
        } else {
            if (project.hasProperty("perf")) {
                includeCategories 'categories.Performance'
            } else {
                excludeCategories 'categories.Performance'
            }
        }
    }
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

repositories {
    mavenCentral()
}
// IDEA
apply plugin: 'idea'
idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
    module {
        generatedSourceDirs += genRoot
    }
}

// GRAMMARKIT
apply plugin: 'org.jetbrains.grammarkit'
grammarKit {
    jflexRelease = jflex_version
    grammarKitRelease = grammarkit_version
}

// TASKS
task generateJenkinsParser(type: GenerateParser) {
    source = "src/main/resources/grammar/Jenkins.bnf"
    pathToParser = '/com/oliverlockwood/plugins/jenkinsfile/parser/JenkinsParser.java'
    pathToPsiRoot = '/com/oliverlockwood/plugins/jenkinsfile/psi/'
}

task generateJenkinsLexer(type: GenerateLexer) {
    dependsOn generateJenkinsParser
    source = "src/main/resources/grammar/Jenkins.flex"
    targetDir = "src-gen/com/oliverlockwood/plugins/jenkinsfile/"
    targetClass = "JenkinsLexer"
}

tasks.withType(GenerateLexer).each {
   // it.skeleton = lexer_skeleton
    it.purgeOldFiles = true
}

tasks.withType(GenerateParser).each {
    it.targetRoot = genRoot
    it.purgeOldFiles = true
}


task generateLexers {
    dependsOn generateJenkinsLexer
}

compileJava {
    dependsOn generateLexers
}